<?php
#!/usr/bin/env php
defined('YII_DEBUG') or define('YII_DEBUG', true);
defined('YII_ENV') or define('YII_ENV', 'dev');

require(__DIR__ . '/vendor/autoload.php');
require(__DIR__ . '/vendor/yiisoft/yii2/Yii.php');
require(__DIR__ . '/common/config/bootstrap.php');
require(__DIR__ . '/console/config/bootstrap.php');
require(__DIR__ . '/common/config/defined.php');
require(__DIR__ . '/common/util/common.php');

class SwooleYiiApplication {

    public function __construct()
    {
        $config = yii\helpers\ArrayHelper::merge(
            require(__DIR__ . '/common/config/main.php'),
            require(__DIR__ . '/common/config/main-local.php'),
            require(__DIR__ . '/console/config/main.php'),
            require(__DIR__ . '/console/config/main-local.php')
        );

        $this->app = new \yii\console\Application($config);

        $this->serv = new swoole_server("127.0.0.1", 9501);
        $this->serv->set(array(
            'worker_num' => 1,
            'task_worker_num' => 1,
            'daemonize' => 1,
            'max_request' => 10000,
            'dispatch_mode' => 2,
            "task_ipc_mode " => 3 ,
            'debug_mode'=> 1,
            'log_file' => __DIR__."/logs/swoole.log",
        ));
        $this->serv->on('workerstart', function($serv, $work_id){
            global $argv;
            if($work_id  >= $serv->setting['worker_num']){
                swoole_set_process_name("php {$argv[0]} task worker");
            }else{
                swoole_set_process_name("php {$argv[0]} work worker");
            }
        });
        $this->serv->on('Receive', array($this, 'onReceive'));
        $this->serv->on('Task', array($this, 'onTask'));
        $this->serv->on('Finish', array($this, 'onFinish'));

        $this->serv->start();

    }
    public function onReceive( swoole_server $serv, $fd, $from_id, $data ) {
        $this->serv->task($data);
    }

    public function onTask($serv,$task_id,$from_id, $data) {
        $array = json_decode( $data , true );
        if (!empty($array['url'])) {
            return $this->httpGet( $array['url'],$array['param']);
        }else {
            $this->app->runAction("AsyncTask/{$array['action']}",$array['param']);
        }
    }
    public function onFinish($serv,$task_id, $data) {
//        echo "Task {$task_id} finishn";
//        echo "Result: {$data}n";
    }
    protected function httpGet($url,$data){
        if ($data) {
            $url .='?'.http_build_query($data) ;
        }
        $curlObj = curl_init();    //初始化curl，
        curl_setopt($curlObj, CURLOPT_URL, $url);   //设置网址
        curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1);  //将curl_exec的结果返回
        curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($curlObj, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($curlObj, CURLOPT_HEADER, 0);         //是否输出返回头信息
        $response = curl_exec($curlObj);   //执行
        curl_close($curlObj);          //关闭会话
        return $response;
    }

}

$app = new SwooleYiiApplication();
